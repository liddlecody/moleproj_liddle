import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, models, transforms
from torch.utils.data import DataLoader
import os

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")


best_learning_rate = 0.01
best_batch_size = 32
best_optimizer = 'SGD'
best_dropout_rate = 0.5


data_transforms = {
    'train': transforms.Compose([
        transforms.ToTensor(),  # Convert PIL image to PyTorch tensor
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])  # Normalize with ImageNet values
    ]),
    'val': transforms.Compose([
        transforms.ToTensor(),  # Convert PIL image to PyTorch tensor
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])  # Normalize with ImageNet values
    ]),
}

#
data_dir = "processed_images"
image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x), transform=data_transforms[x]) for x in ['train', 'val']}

def create_model(learning_rate, dropout_rate, optimizer_name, device):
    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Sequential(
        nn.Dropout(dropout_rate),
        nn.Linear(num_ftrs, len(image_datasets['train'].classes))
    )

    model_ft = model_ft.to(device)  # Move model to GPU

    if optimizer_name == 'SGD':
        optimizer = optim.SGD(model_ft.parameters(), lr=learning_rate, momentum=0.9)
    elif optimizer_name == 'Adam':
        optimizer = optim.Adam(model_ft.parameters(), lr=learning_rate)

    criterion = nn.CrossEntropyLoss()

    return model_ft, optimizer, criterion

model_ft, optimizer, criterion = create_model(best_learning_rate, best_dropout_rate, best_optimizer, device)


dataloaders = {x: DataLoader(image_datasets[x], batch_size=best_batch_size, shuffle=True, num_workers=0) for x in ['train', 'val']}
dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
class_names = image_datasets['train'].classes

# Number of epochs for final training
num_epochs = 25


for epoch in range(num_epochs):
    print(f"Epoch {epoch}/{num_epochs - 1}")
    print('-' * 10)

    for phase in ['train', 'val']:
        if phase == 'train':
            model_ft.train()  # Set model to training mode
        else:
            model_ft.eval()   # Set model to evaluate mode

        running_loss = 0.0
        running_corrects = 0

        for inputs, labels in dataloaders[phase]:
            inputs = inputs.to(device)
            labels = labels.to(device)

            optimizer.zero_grad()

            with torch.set_grad_enabled(phase == 'train'):
                outputs = model_ft(inputs)
                _, preds = torch.max(outputs, 1)
                loss = criterion(outputs, labels)

                if phase == 'train':
                    loss.backward()
                    optimizer.step()

            running_loss += loss.item() * inputs.size(0)
            running_corrects += torch.sum(preds == labels.data)

        epoch_loss = running_loss / dataset_sizes[phase]
        epoch_acc = running_corrects.double() / dataset_sizes[phase]

        print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')

# Save the trained model
torch.save(model_ft.state_dict(), "final_model.pth")
print('Final model training complete and saved.')
